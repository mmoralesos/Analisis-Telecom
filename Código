# telco_churn_analysis.py

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Leer datos JSON desde la URL
url = 'https://raw.githubusercontent.com/ingridcristh/challenge2-data-science-LATAM/refs/heads/main/TelecomX_Data.json'
df = pd.read_json(url)

# Expandir columnas anidadas
customer_df = pd.json_normalize(df['customer'])
phone_df = pd.json_normalize(df['phone'])
internet_df = pd.json_normalize(df['internet'])
account_df = pd.json_normalize(df['account'])

# Combinar en un solo DataFrame
df_clean = pd.concat([df[['customerID', 'Churn']], customer_df, phone_df, internet_df, account_df], axis=1)

# Limpieza de nombres de columnas
df_clean.columns = df_clean.columns.str.strip().str.replace(' ', '_').str.replace('.', '_')

# Convertir tipos de datos
numericas = ['tenure', 'Charges_Monthly', 'Charges_Total']
booleanas = ['Partner', 'Dependents', 'PhoneService', 'PaperlessBilling',
             'MultipleLines', 'OnlineSecurity', 'OnlineBackup',
             'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Churn']

df_clean[numericas] = df_clean[numericas].apply(pd.to_numeric, errors='coerce')
df_clean[booleanas] = df_clean[booleanas].apply(lambda x: x.map({'Yes': 'si', 'No': 'no'}))

# Visualización 1: Servicios más contratados
servicios = ['PhoneService', 'MultipleLines', 'OnlineSecurity',
             'OnlineBackup', 'DeviceProtection', 'TechSupport',
             'StreamingTV', 'StreamingMovies']

df_servicios = pd.DataFrame({
    'Servicio': servicios,
    'Contratados': [df_clean[s].value_counts().get('si', 0) for s in servicios]
})

plt.figure(figsize=(10, 6))
sns.barplot(data=df_servicios, x='Contratados', y='Servicio', palette='Blues_d')
plt.title('Cantidad de Servicios Contratados')
plt.xlabel('Cantidad de Clientes')
plt.ylabel('Servicio')
plt.tight_layout()
plt.savefig("servicios_mas_contratados.png")

# Visualización 2: Churn por tipo de contrato
plt.figure(figsize=(8, 5))
sns.countplot(data=df_clean, x='Contract', hue='Churn', palette='pastel')
plt.title('Churn por Tipo de Contrato')
plt.ylabel('Cantidad de Clientes')
plt.xticks(rotation=15)
plt.tight_layout()
plt.savefig("churn_por_contrato.png")

# Visualización 3: Distribución de ingresos totales según churn
plt.figure(figsize=(8, 5))
sns.histplot(data=df_clean, x='Charges_Total', hue='Churn', element='step', stat='density', common_norm=False)
plt.title('Distribución de Ingresos Totales según Churn')
plt.xlabel('Cargos Totales (USD)')
plt.tight_layout()
plt.savefig("distribucion_ingresos_churn.png")

# Visualización 4: Permanencia por servicio
servicio_tenure = [(s, df_clean[df_clean[s] == 'si']['tenure'].mean()) for s in servicios]
df_tenure = pd.DataFrame(servicio_tenure, columns=['Servicio', 'TenureProm'])

plt.figure(figsize=(10, 6))
sns.barplot(data=df_tenure, x='TenureProm', y='Servicio', palette='viridis')
plt.title('Promedio de Permanencia por Servicio Contratado')
plt.xlabel('Meses')
plt.tight_layout()
plt.savefig("permanencia_por_servicio.png")

# Visualización 5: Churn por método de pago
plt.figure(figsize=(10, 5))
sns.countplot(data=df_clean, x='PaymentMethod', hue='Churn', palette='Set2')
plt.title('Churn por Método de Pago')
plt.ylabel('Cantidad de Clientes')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig("churn_por_metodo_pago.png")

# Visualización 6: Correlaciones
plt.figure(figsize=(8, 6))
sns.heatmap(df_clean[numericas].corr(), annot=True, cmap='coolwarm')
plt.title('Correlaciones entre variables numéricas')
plt.tight_layout()
plt.savefig("correlaciones.png")

# Visualización 7: Boxplot de cargos mensuales
plt.figure(figsize=(8, 5))
sns.boxplot(data=df_clean, x='Contract', y='Charges_Monthly', palette='Accent')
plt.title('Cargos Mensuales por Tipo de Contrato')
plt.ylabel('USD por mes')
plt.tight_layout()
plt.savefig("cargos_por_contrato.png")
